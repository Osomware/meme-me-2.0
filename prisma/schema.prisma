generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  externalId  String   @unique
  username    String   @unique
  email       String   @unique
  displayName String
  imageUrl    String   @map("userImage")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role  Role   @default(USER)
  posts Post[]
}

enum Role {
  USER
  ADMIN
}

model Post {
  id                 Int           @id @default(autoincrement())
  title              String?
  mediaFiles         MediaFile[]
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             Int
  isHideLikeAndCount Boolean       @default(false)
  isTurnOffComment   Boolean       @default(false)
  postHashtags       PostHashtag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model MediaFile {
  id        Int      @id @default(autoincrement())
  key       String
  url       String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model PostHashtag {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    Int
  hashtag   Hashtag  @relation(fields: [hashtagId], references: [id])
  hashtagId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([postId, hashtagId])
}

model Hashtag {
  id           Int           @id @default(autoincrement())
  tag          String        @unique
  postHashtags PostHashtag[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
}
